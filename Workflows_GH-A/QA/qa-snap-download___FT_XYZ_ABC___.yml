name: QA - Snapshot Download

on:
  schedule:
    - cron: '0 20 * * 1-6'  # Run every night at 20:00 (08:00 PM) UTC except Sunday
  workflow_dispatch:     # Run manually

jobs:
  snap-download-test:
    runs-on: self-hosted
    timeout-minutes: 500
    env:
      ___FT_XYZ_ABC____DATA_DIR: ${{ github.workspace }}/___FT_XYZ_ABC____data
      ___FT_XYZ_ABC____QA_PATH: /home/qarunner/___FT_XYZ_ABC___-qa
      TOTAL_TIME_SECONDS: 28800 # 8 hours
      CHAIN: mainnet

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Clean ___FT_XYZ_ABC___ Build & Data Directories
      run: |
        make clean
        rm -rf $___FT_XYZ_ABC____DATA_DIR

    - name: Build ___FT_XYZ_ABC___
      run: |
        make ___FT_XYZ_ABC___
      working-directory: ${{ github.workspace }}

    - name: Pause the ___FT_XYZ_ABC___ instance dedicated to db maintenance
      run: |
        python3 $___FT_XYZ_ABC____QA_PATH/test_system/db-producer/pause_production.py || true

    - name: Run ___FT_XYZ_ABC___ and monitor snapshot downloading
      id: test_step
      run: |
        set +e # Disable exit on error
             
        # Run ___FT_XYZ_ABC___, monitor snapshot downloading and check logs
        python3 $___FT_XYZ_ABC____QA_PATH/test_system/qa-tests/snap-download/run_and_check_snap_download.py \
          ${{ github.workspace }}/build/bin $___FT_XYZ_ABC____DATA_DIR $TOTAL_TIME_SECONDS ___FT_XYZ_ABC___ $CHAIN
  
        # Capture monitoring script exit status
        test_exit_status=$?
        
        # Save the subsection reached status
        echo "::set-output name=test_executed::true"
        
        # Clean up ___FT_XYZ_ABC___ process if it's still running
        if kill -0 $___FT_XYZ_ABC____PID 2> /dev/null; then
          echo "Terminating ___FT_XYZ_ABC___"
          kill $___FT_XYZ_ABC____PID
          wait $___FT_XYZ_ABC____PID
        fi
        
        # Check test runner script exit status
        if [ $test_exit_status -eq 0 ]; then
          echo "Tests completed successfully"
          echo "TEST_RESULT=success" >> "$GITHUB_OUTPUT"
        else
          echo "Error detected during tests"
          echo "TEST_RESULT=failure" >> "$GITHUB_OUTPUT"
        fi

    - name: Save test results
      if: steps.test_step.outputs.test_executed == 'true'
      env:
        TEST_RESULT: ${{ steps.test_step.outputs.TEST_RESULT }}
      run: |
        python3 $___FT_XYZ_ABC____QA_PATH/test_system/qa-tests/uploads/upload_test_results.py \
          --repo ___FT_XYZ_ABC___ \
          --commit $(git rev-parse HEAD) \
          --branch ${{ github.ref_name }} \
          --test_name snap-download \
          --chain $CHAIN \
          --runner ${{ runner.name }} \
          --outcome $TEST_RESULT \
          --result_file ${{ github.workspace }}/result-$CHAIN.json

    - name: Upload test results
      if: steps.test_step.outputs.test_executed == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          ${{ github.workspace }}/result-${{ env.CHAIN }}.json
          ${{ github.workspace }}/___FT_XYZ_ABC____data/logs/___FT_XYZ_ABC___.log

    - name: Clean up ___FT_XYZ_ABC___ data directory
      if: always()
      run: |
        rm -rf $___FT_XYZ_ABC____DATA_DIR

    - name: Resume the ___FT_XYZ_ABC___ instance dedicated to db maintenance
      run: |
        python3 $___FT_XYZ_ABC____QA_PATH/test_system/db-producer/resume_production.py || true

    - name: Action for Success
      if: steps.test_step.outputs.TEST_RESULT == 'success'
      run: echo "::notice::Tests completed successfully"

    - name: Action for Not Success
      if: steps.test_step.outputs.TEST_RESULT != 'success'
      run: |
        echo "::error::Error detected during tests"
        exit 1